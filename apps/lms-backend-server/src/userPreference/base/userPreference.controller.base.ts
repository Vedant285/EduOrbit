/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserPreferenceService } from "../userPreference.service";
import { UserPreferenceCreateInput } from "./UserPreferenceCreateInput";
import { UserPreference } from "./UserPreference";
import { Post } from "../../post/base/Post";
import { UserPreferenceFindManyArgs } from "./UserPreferenceFindManyArgs";
import { UserPreferenceWhereUniqueInput } from "./UserPreferenceWhereUniqueInput";
import { UserPreferenceUpdateInput } from "./UserPreferenceUpdateInput";

export class UserPreferenceControllerBase {
  constructor(protected readonly service: UserPreferenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserPreference })
  async createUserPreference(
    @common.Body() data: UserPreferenceCreateInput
  ): Promise<UserPreference> {
    return await this.service.createUserPreference({
      data: data,
      select: {
        createdAt: true,
        id: true,
        theme: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserPreference] })
  @ApiNestedQuery(UserPreferenceFindManyArgs)
  async userPreferences(
    @common.Req() request: Request
  ): Promise<UserPreference[]> {
    const args = plainToClass(UserPreferenceFindManyArgs, request.query);
    return this.service.userPreferences({
      ...args,
      select: {
        createdAt: true,
        id: true,
        theme: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserPreference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userPreference(
    @common.Param() params: UserPreferenceWhereUniqueInput
  ): Promise<UserPreference | null> {
    const result = await this.service.userPreference({
      where: params,
      select: {
        createdAt: true,
        id: true,
        theme: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserPreference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserPreference(
    @common.Param() params: UserPreferenceWhereUniqueInput,
    @common.Body() data: UserPreferenceUpdateInput
  ): Promise<UserPreference | null> {
    try {
      return await this.service.updateUserPreference({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          theme: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserPreference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserPreference(
    @common.Param() params: UserPreferenceWhereUniqueInput
  ): Promise<UserPreference | null> {
    try {
      return await this.service.deleteUserPreference({
        where: params,
        select: {
          createdAt: true,
          id: true,
          theme: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
